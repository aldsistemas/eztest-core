plugins {
    id 'groovy'
    id 'java-library'
    id 'maven-publish'
}
rootProject.version = generateVersion();
group = 'br.com.eztest'
version = rootProject.version;

repositories {
    mavenCentral()
}


dependencies {
    implementation 'org.apache.groovy:groovy:4.0.14'
    implementation 'org.hibernate:hibernate-core:5.6.15.Final'
    implementation 'org.postgresql:postgresql:42.7.3'
    implementation("org.spockframework:spock-core:2.3-groovy-4.0")
    implementation("commons-lang:commons-lang:2.6")
}

test {
    useJUnitPlatform()
}
java {
    withJavadocJar()
    withSourcesJar()
}


def generateVersion() {
    def props = new Properties()
    def verFile = new File("${rootProject.projectDir}/version.properties")
    def version = ""
    if (verFile.exists()) {
        verFile.withInputStream { props.load(it) }
        def classifier = props['version.classifier']
        version = props['version.major'] + '.' + props['version.minor']
        def buildNumber = props['build.number']
        def suffix = ''
        if ('SNAPSHOT'.equals(classifier)) {
            suffix = '-' + (new Date().format('yyyyMMdd_HHmm'))
        } else if (buildNumber != null) {
            suffix = '.' + buildNumber;
        } else if (System.env['GO_PIPELINE_COUNTER']) {
            suffix = '.' + System.env['GO_PIPELINE_COUNTER']
        } else if (System.env['BITBUCKET_BUILD_NUMBER']) {
            suffix = '.' + System.env['BITBUCKET_BUILD_NUMBER']
        } else if (System.env['ARTIFACT_BUILD_NUMBER']) {
            suffix = '.' + System.env['ARTIFACT_BUILD_NUMBER']
        } else if (System.env['BUILD_NUMBER']) {
            suffix = '.' + System.env['BUILD_NUMBER']
        }
        version += suffix
    } else {
        println "[WARN] Version unknown. Create version.properties with version.major, version.minor, version.classifier properties."
    }
    version
}

processResources.doLast {
    writeFile(new File("${buildDir}/resources/main/VERSION"), rootProject.version)
    writeFile(new File("${projectDir}/VERSION"), rootProject.version)
}

def writeFile(file, content) {
    file.getParentFile().mkdirs()
    file.createNewFile()
    file.withOutputStream { it << content }
}

//publishing {
//    publications {
//        mavenJava(MavenPublication) {
//            groupId project.group
//            artifactId project.name
//            version project.version
//            from components.java
//        }
//    }
//    repositories {
//        maven {
//            url "https://mitfokus-maven-374617860519.d.codeartifact.us-east-1.amazonaws.com/maven/mitfokus-maven/"
//            credentials {
//                username "aws"
//                password repoPassword
//            }
//        }
//    }
//}